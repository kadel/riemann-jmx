#!/usr/bin/env jruby

require 'yaml'
require 'jmx4r'
require 'riemann/client'
require 'json'

java_import 'java.util.concurrent.Callable'
java_import 'java.util.concurrent.FutureTask'
java_import 'java.util.concurrent.LinkedBlockingQueue'
java_import 'java.util.concurrent.ThreadPoolExecutor'
java_import 'java.util.concurrent.TimeUnit'

module Riemann
    module Tools
        class Riemann::Tools::JMXClient
            include Callable

            def initialize(config = "riemann-conf.yaml")
                @config_file = config
            end
            
            def config
                return @config if @config
                $stderr.puts "Reading config file at '#{@config_file}'...\n"
                begin
                    @config = YAML.load_file @config_file
                    #$stderr.puts @config
                rescue => e
                    $stderr.puts "Unable to read config file at #{@config_file}!\n"
                    $stderr.puts "#{e.class}: #{e.message}\n"
                    raise e
                end
                @config
            end
            
            def options
                @options ||= { :host => '127.0.0.1',
                               :port => 5555,
                               :interval => 5,
                               :use_jmxhost => false,
                               :obj_in_service => true
                }.merge( config['riemann'] || {} )
            end
            
            def defaults
                @defaults ||= config['defaults'] or {}
            end
            
            def queries
                @queries ||= config['queries'] or []
            end
            
            
            ### Gather Metrics
            
            def send_all_stats
                jmx_host = config['jmx']['host']
                jmx_port = config['jmx']['port']
                # $stderr.puts "RMI Server: #{jmx_host}:#{jmx_port}\n\n"
                begin
                    JMX::MBean.establish_connection :host => jmx_host, :port => jmx_port
                rescue Exception => e
                    $stderr.puts "#{e.class}: #{e.message}\n"
                    report(
                        :service     => "jmx.#{jmx_host}:#{jmx_port}",
                        :state       => 'error',
                        :description => "Could not connect to JMX: #{e.class}, #{e.message}",
                        :tags        => ([ "error", "jmx" ] + (defaults['tags'] || [])).uniq
                    )
                    return
                end
                
                queries.each { |query|
                    beans = JMX::MBean.find_all_by_name query['obj']
                    attrs = query['attr']
                    beans.each { |bean|
                        bean.attributes.each{ |attr|
                            # attr[0] - ruby fce name
                            # attr[1] - java jmx attribute name

                            attrs.each{ |a|
                                #  a is String -> test for simple key
                                if (a.instance_of? String) and (a==attr[1])
                                    data = bean.send(attr[0])
                                    # $stderr.puts "#{bean.object_name.to_s}.#{attr[1]}=#{data.to_s}"
                                    send_stat(bean.with_object.to_s, data, nil, defaults.merge(query))
                                end

                                # a is Hash -> search all keys in that hash
                                if (a.instance_of? Hash) and (a.keys.include? attr[1])
                                    data = bean.send(attr[0])
                                    # this is composite key, so we need to digg on level deeper
                                    a[attr[1]].each{ |composite_key|
                                        if composite_key.instance_of? Hash and composite_key.keys.include? "_json" 
                                            # this keys is marked as containing json data
                                            j = JSON.parse(data)
                                            composite_key["_json"].each { |k|
                                                # each key is path in nasted arrays
                                                # each level is separated by "/"
                                                val = j
                                                k.split("/").each{ |l|
                                                    val = val[l]
                                                }
                                                # we want to report path in json separated by "."
                                                k_str = k.split("/").join(".")
                                                send_stat(bean.object_name.to_s, "#{attr[1]}.#{k_str}", val, defaults.merge(query))
                                            }
                                        else
                                            # $stderr.puts "#{bean.object_name.to_s}.#{attr[1]}.#{composite_key}=#{data.get(composite_key).to_s}"
                                            send_stat(bean.object_name.to_s, "#{attr[1]}.#{composite_key}", data.get(composite_key), defaults.merge(query))
                                        end
                                    }
                                end
                            }
                        }
                    }
                }
            end


            def send_stat(obj_name, attr, metric, args)
                service = options['service_prefix'] || ""
                if options['obj_in_service']
                    service += args['service'] || obj_name
                    service += "."
                end
                service += "#{attr}"
                desc    = args['description']
                tags    = args['tags']
                begin
                    report(
                        :host        => options['use_jmxhost'] ? config['jmx']['host'] : nil,
                        :service     => service,
                        :state       => args['state'] || 'ok',
                        :metric      => metric,
                        :description => desc,
                        :tags        => tags
                    )
                rescue => e
                    $stderr.puts "error! #{e.class} #{e}\n"
                    report(
                        :host        => config['jmx']['host'],
                        :service     => service,
                        :state       => 'error',
                        :description => desc,
                        :tags        => ([ "error", "jmx" ] + (tags || [])).uniq
                    )
                end
            end
 
            ### Reporting
            #
            def report(event)
                event.delete_if { |k, v| v == nil }
                #$stderr.puts "sending event: #{event}\n"
                riemann << event
            end
            
            def tick
                send_all_stats
            end
            
            def riemann
                @riemann ||= Riemann::Client.new(
                    :host => options['host'],
                    :port => options['port']
                )
            end
            alias :r :riemann
            
            def call
                #$stderr.puts "#{self}.run!"
                t0 = Time.now
                interval = options['interval']
                loop do
                    begin
                        #$stderr.puts "#{@config_file} - tick! #{t0} @ #{interval}"
                        tick
                    rescue => e
                        $stderr.puts "#{e.class} #{e}\n#{e.backtrace.join "\n"}"
                    end
                    
                    sleep(interval - ((Time.now - t0) % interval))
                end
            end
        end
    end
end

clients = Array.new

executor = ThreadPoolExecutor.new(
    ARGV.length, # core_pool_tread
    ARGV.length, # max_pool_threads
    60, # keep_alive_time
    TimeUnit::SECONDS,
    LinkedBlockingQueue.new
)

ARGV.each{ |arg|
    task = FutureTask.new(Riemann::Tools::JMXClient.new(arg))
    executor.execute(task)
    clients << task
}

# Wait for all threads to complete
clients.each{ |c|
    c.get
}


